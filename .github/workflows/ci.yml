name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11']
    steps:
      - uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest spotipy qbittorrent-api requests beautifulsoup4 python-dotenv
          if [ "$RUNNER_OS" == "Linux" ]; then
            pip install pystray Pillow
          elif [ "$RUNNER_OS" == "macOS" ]; then
            pip install rumps pync
          fi
      - name: Run tests
        run: |
          pytest --maxfail=1 --disable-warnings -q

  build:
    needs: test # Ensure tests pass before building
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.9'] # Build with one Python version, e.g., 3.9

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install PyInstaller (will be added to requirements.txt later)
          pip install pyinstaller
          # Install all other dependencies from requirements.txt
          # (Assuming PyInstaller will be added there)
          # For now, list them explicitly based on setup.py, including OS specific ones
          pip install spotipy qbittorrent-api requests beautifulsoup4 python-dotenv setuptools wheel
          if [ "$RUNNER_OS" == "Linux" ]; then
            pip install pystray Pillow
          elif [ "$RUNNER_OS" == "macOS" ]; then
            pip install rumps pync
          fi

      - name: Run PyInstaller
        run: |
          # The main script is spotify-torrent-menu.py
          # We need to determine the best way to name the output and what files to include.
          # For now, let's create a basic executable.
          # Output will be in the 'dist' directory.
          python -m PyInstaller --noconfirm --onefile --windowed spotify-torrent-menu.py
          # The --name could be something like spotify-syncer-${{ matrix.os }}

      - name: Archive executable
        uses: actions/upload-artifact@v4
        with:
          name: spotify-syncer-${{ matrix.os }}
          path: ${{ runner.os == 'Linux' && 'dist/spotify-torrent-menu' || runner.os == 'macOS' && 'dist/spotify-torrent-menu.app' }}

  release:
    needs: build # Ensure build succeeds before releasing
    runs-on: ubuntu-latest # Release can run on a single OS
    if: startsWith(github.ref, 'refs/tags/v') # Only run on version tags

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts # Download all artifacts to a directory

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Zip macOS app bundle
        # This step runs on ubuntu-latest (where the release job is running),
        # it needs to find the macOS artifact downloaded by download-artifact.
        # Artifacts are downloaded into subdirectories named after the artifact.
        run: |
          echo "Zipping macOS app bundle..."
          ls -R artifacts
          cd artifacts/spotify-syncer-macos-latest
          zip -r ../../spotify-torrent-menu.app.zip spotify-torrent-menu.app
          cd ../..
          echo "Zipping complete. File should be at workspace root:"
          ls spotify-torrent-menu.app.zip

      - name: Upload Linux Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/spotify-syncer-ubuntu-latest/spotify-torrent-menu
          asset_name: spotify-syncer-linux
          asset_content_type: application/octet-stream

      - name: Upload macOS Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: spotify-torrent-menu.app.zip # Path to the zip file created in the previous step
          asset_name: spotify-syncer-macos.zip
          asset_content_type: application/zip
